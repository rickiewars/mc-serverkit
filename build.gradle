plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group
minecraft_version = project.minecraft_version
loader_version = project.loader_version

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven {
		url = 'https://cursemaven.com'
	}

	// Mods from Patbox
	maven { url = 'https://maven.nucleoid.xyz' }
}

loom {
    splitEnvironmentSourceSets()

	mods {
		"serverkit" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Adds compatibility with unmodified clients. Technically optional, but you'll want it when running your server.
	modImplementation include("eu.pb4:polymer-core:${project.polymer_version}")

	// Add compatibility with lots of economy mods
	modImplementation include("eu.pb4:common-economy-api:${project.common_economy_api_version}")

	include(modImplementation("me.lucko:fabric-permissions-api:${project.fabric_permissions_api_version}"))

	// Used for unit tests
	testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"
	testImplementation "org.junit.platform:junit-platform-suite:${project.junit_platform_version}"
	testImplementation "org.junit.platform:junit-platform-suite-engine:${project.junit_platform_version}"

	implementation "com.ezylang:EvalEx:${project.evalex_version}"
}

processResources {
	inputs.property "version", project.version
	inputs.property "minecraft_version", minecraft_version
	inputs.property "loader_version", loader_version

	filesMatching("fabric.mod.json") {
		expand(
			"version": inputs.properties["version"],
			"loader_version": inputs.properties["loader_version"],
			"minecraft_version": inputs.properties["minecraft_version"]
		)
	}
}

test {
	useJUnitPlatform()

	testLogging {
		events = ["passed", "skipped", "failed"]
		exceptionFormat = "full" // So you get full stacktraces, not truncated garbage
		showExceptions = true
		showCauses = true
		showStackTraces = true
		showStandardStreams = true // Captures System.out and System.err during tests
	}

	afterTest { descriptor, result ->
		logger.lifecycle("Duration: ${result.endTime - result.startTime} ms")
	}

	afterSuite { desc, result ->
		if (!desc.parent && result.testCount == 0) {
			throw new GradleException("No tests were executed! Check your test configuration.")
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

tasks.register("verifyTagMatchesVersion") {
	doLast {
		def tag = project.findProperty("tag")?.toString()
		def version = project.findProperty("mod_version")?.toString()

		if (tag == null || version == null) {
			throw new GradleException("Missing tag or mod_version.")
		}

		if (tag != version) {
			throw new GradleException("Tag ($tag) does not match mod_version ($version)")
		}

		println "âœ… Tag matches mod_version: $version"
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

def archivesName = project.base.archivesName.get()
jar {
	from("LICENSE") {
		rename { "${it}_${archivesName}" }
	}
}

// configure the maven publication
//publishing {
//	publications {
//		mavenJava(MavenPublication) {
//			from components.java
//		}
//	}
//
//	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
//	repositories {
//		// Add repositories to publish to here.
//		// Notice: This block does NOT have the same function as the block in the top level.
//		// The repositories here will be used for publishing your artifact, not for
//		// retrieving dependencies.
//	}
//}